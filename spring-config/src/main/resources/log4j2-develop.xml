<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别的优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL-->
<!--status="WARN": 用于设置log4j2自身内部日志的信息输出级别, 默认是OFF-->
<!--monitorInterval="30": 间隔秒数, 自动检测配置文件的变更和重新配置本身-->
<configuration status="WARN" monitorInterval="30">
    <!--自定义一些常量, 之后可以使用变量名进行引用-->
    <properties>
        <!--格式化输出: %date表示日期, %thread表示线程名字, %-5level表示级别从左显示5个字符宽度, %msg日志消息, %n换行符,
        %logger{36}表示Logger名字最长36个字符-->
        <property name="LOG_PATTERN" value="%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"></property>
        <!--定义日志的存储路径, 使用绝对路径-->
        <property name="FILE_PATH" value="I:\log"></property>
        <!--定义日志的文件名字, 建议使用项目名-->
        <property name="FILE_NAME" value="springConfig"></property>
    </properties>
    <!--appenders: 定义输出内容, 输出格式, 输出方式, 日志保存策略等, 常用其下三种标签console, File, RollingFile -->
    <appenders>
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志格式-->
            <PatternLayout pattern="${LOG_PATTERN}"></PatternLayout>
            <!--控制台只输出level级别以上的信息, onMatch匹配接收, onMismatch不匹配拒绝-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"></ThresholdFilter>
        </console>

        <!--文件会打印所有信息, 这个log每次运行程序会自动清空, 有append属性决定, 适合临时测试使用, 在测试和生产一般不使用-->
        <File name="FileLog" fileName="${FILE_PATH}/${FILE_NAME}Test.log" append="false">
            <PatternLayout pattern="${LOG_PATTERN}"></PatternLayout>
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"></ThresholdFilter>
        </File>

        <!--这个会打印所有info及以下级别的信息, 日志文件大小超过size或者时间间隔超过interval, 则将日志文件进行滚动封装压缩,
        然后自动存入按照年份-月份的文件夹下存档-->
        <RollingFile name="RollingFileInfo" fileName="${FILE_PATH}/${FILE_NAME}Info.log" filePattern="${FILE_PATH}/${FILE_NAME}-info-%d{yyyy-MM-dd}_%i.log.gz">
            <PatternLayout pattern="${LOG_PATTERN}"></PatternLayout>
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"></ThresholdFilter>
            <Policies>
                <!--interval属性以小时为单位用来指定多久滚动一次, size属性用来指定文件大小超过多少滚动一次, 两者有一个满足就进行滚动-->
                <TimeBasedTriggeringPolicy interval="1"></TimeBasedTriggeringPolicy>
                <SizeBasedTriggeringPolicy size="10MB"></SizeBasedTriggeringPolicy>
            </Policies>
            <!--DefaultRolloverStrategy属性如不设置, 则默认同一个文件夹下7个文件进行覆盖-->
            <DefaultRolloverStrategy max="15"></DefaultRolloverStrategy>
        </RollingFile>
        <!--这个会打印所有warn及以下级别的信息, 日志文件大小超过size或者时间间隔超过interval, 则将日志文件进行滚动封装压缩,
        然后自动存入按照年份-月份的文件夹下存档-->
        <RollingFile name="RollingFileWarn" fileName="${FILE_PATH}/${FILE_NAME}Warn.log" filePattern="${FILE_PATH}/${FILE_NAME}-warn-%d{yyyy-MM-dd}_%i.log.gz">
            <PatternLayout pattern="${LOG_PATTERN}"></PatternLayout>
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"></ThresholdFilter>
            <Policies>
                <!--interval属性以小时为单位用来指定多久滚动一次, size属性用来指定文件大小超过多少滚动一次, 两者有一个满足就进行滚动-->
                <TimeBasedTriggeringPolicy interval="1"></TimeBasedTriggeringPolicy>
                <SizeBasedTriggeringPolicy size="10MB"></SizeBasedTriggeringPolicy>
            </Policies>
            <!--DefaultRolloverStrategy属性如不设置, 则默认同一个文件夹下7个文件进行覆盖-->
            <DefaultRolloverStrategy max="15"></DefaultRolloverStrategy>
        </RollingFile>
        <!--这个会打印所有error及以下级别的信息, 日志文件大小超过size或者时间间隔超过interval, 则将日志文件进行滚动封装压缩,
        然后自动存入按照年份-月份的文件夹下存档-->
        <RollingFile name="RollingFileError" fileName="${FILE_PATH}/${FILE_NAME}Error.log" filePattern="${FILE_PATH}/${FILE_NAME}-error-%d{yyyy-MM-dd}_%i.log.gz">
            <PatternLayout pattern="${LOG_PATTERN}"></PatternLayout>
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"></ThresholdFilter>
            <Policies>
                <!--interval属性以小时为单位用来指定多久滚动一次, size属性用来指定文件大小超过多少滚动一次, 两者有一个满足就进行滚动-->
                <TimeBasedTriggeringPolicy interval="1"></TimeBasedTriggeringPolicy>
                <SizeBasedTriggeringPolicy size="10MB"></SizeBasedTriggeringPolicy>
            </Policies>
            <!--DefaultRolloverStrategy属性如不设置, 则默认同一个文件夹下7个文件进行覆盖-->
            <DefaultRolloverStrategy max="15"></DefaultRolloverStrategy>
        </RollingFile>
    </appenders>
    <!--然后定义loggers, 只有定义了logger并引入了appender, appender才会生效-->
    <loggers>
        <!--logger节点用来单独指定日志的形式, 比如为指定包下的class指定不同的日志级别-->
        <!--过滤掉mybatis的一些无用的DEBUG信息, 设置additivity为false, 则日志只会在logger指定的appender中输出, 不会再root指定的appender中输出-->
        <logger name="org.mybatis" level="info" additivity="false">
            <AppenderRef ref="Console"></AppenderRef>
        </logger>
        <logger name="org.springframework" level="info" additivity="false">
            <AppenderRef ref="Console"></AppenderRef>
        </logger>
        <!--AsyncLogger: 一步日志, Log4j2有三种日志模式, 全异步日志模式, 混合模式, 同步日志模式, 性能由高到底,
        线程数越多, 效率越高, 也可以避免日志卡死情况的发生-->
        <!--指定项目com包下的日志为异步输出日志, 如果配置了在application.properties中配置了属性log4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
        则在loggers标签内不能再出现先AsychLogger的配置, 只出现logger和root配置即可, 输出日志全部为异步日志-->
        <!--        <AsyncLogger name="com" level="info" includeLocation="trye" additivity="false">-->
        <!--            <AppenderRef ref="Console"></AppenderRef>-->
        <!--            <AppenderRef ref="RollingFileInfo"></AppenderRef>-->
        <!--        </AsyncLogger>-->
        <!--root节点用来指定项目的根日志, 如果没有单独指定logger, 就会默认使用root指定appender输出-->
        <root level="info">
            <AppenderRef ref="Console"></AppenderRef>
            <AppenderRef ref="RollingFileInfo"></AppenderRef>
        </root>
    </loggers>

</configuration>